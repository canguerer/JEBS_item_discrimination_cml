# depends on the packages eRm, Matrix, and psychotools.
# general likelihood function for an arbitrary number of items k
# y stands for (observed) binary response matrix 
# with n rows (persons) and k columns (items) 
		
loglike <- function(b){
			
	k <- ncol(y)
	r <- rowSums(y)
	y1 <- y[r > 0 & r < k,]
	r1 <- rowSums(y1)
		
	m <- b[1:k] + b[(k+1):(2*k)] %o% (0:(k-2))
	g <- apply(X = m, MARGIN = 2, 
	FUN = psychotools::elementary_symmetric_functions)
	i <- seq(from = 2, to = (k-1)*(k+1), by = k+1+1)
	ft <- table(factor(r1, levels = 1:(k-1)))
	c <- sum(ft * log(unlist(g)[i]))
			
	m1 <- array(-b[1:k], dim = c(k, nrow(y1)))
	m2 <- array(-b[(k+1):(2*k)], dim = c(k, nrow(y1)))
	m3 <- t(m2) * (r1 - 1)
	logl <- sum(rowSums(y1 * (t(m1) + m3))) - c
			
	return(-logl)
}
# score function, gradient
score <- function(b){
	k <- ncol(y)
	r <- rowSums(y)
	ft <- table(factor(r, levels = 0:k))
			
	m <- b[1:k] + b[(k+1):(2*k)] %o% (0:(k-2)) 
	g <- apply(X = m, MARGIN = 2, 
	FUN = psychotools::elementary_symmetric_functions, order = 1)
			
	f <- function(i) as.vector(ft) * (g[[i]]$'1' / g[[i]]$'0')
	  a <- lapply(X = 1:(k-1), FUN = f) 
			
	  f1 <- function(j) a[[j]][j+1,]
	  a1 <- sapply(X = 1:(k-1), FUN = f1)
	  score1 <- colSums(y) - ft[k+1] - rowSums(a1)
	  y1 <- y * (r-1)
	  score2 <- colSums(y1[r > 1 & r < k,]) - 
	  rowSums(a1[,2:(k-1)] * (rep(1, k) %o% (1:(k-2)))) 
	  score <- c(score1, score2)
			
	  return(score)		
	}
		
# information function, block diagonal matrix, 
# each block referring to one of k-1 person scores 
info <- function(b){
			
	k <- ncol(y)
	m <- b[1:k] + b[(k+1):(2*k)] %o% (0:(k-2))
	e <- apply(X = m, MARGIN = 2, 
	FUN = psychotools::elementary_symmetric_functions, order = 2)
			
	f <- function(i){
		g <- e[[i]]$`0`
		g1 <- e[[i]]$`1`
		cp <- g1[2:k,] / g[2:k]
		return(cp)
	}
			
	f1 <- function(i){
		g <- e[[i]]$`0`
		g2 <- e[[i]]$`2`
		cp2 <- g2[2:k,,] / g[2:k]
		return(cp2)
	}
			
	cp <- lapply(X = 1:(k-1), FUN = f)
	cp2 <- lapply(X = 1:(k-1), FUN = f1)
			
	r <- rowSums(y)
	ft <- table(factor(r, levels = 1:(k-1)))
			
	f2 <- function(j) (ft[j] * (cp2[[j]][j,,] - 
	cp[[j]][j,] %o% cp[[j]][j,]))[1:(k-1),1:(k-1)]
			
	l <- lapply(X = 1:(k-1), FUN = f2) 
	I <- Matrix::bdiag(l)
			
	return(I)			
}
		
# Note. A simpler and computationally more efficient function can be 
# used for the score test statistic (but not for Wald). In this case, 
# the matrix m is not needed and b has only length k composed of the 
# k item parameters of the RM. The elementary symmetric functions 
# are evaluated only once at b (not at each column of m).     

# auxiliary functions
		
f <- function(i){
	h1 <- array(rep(0, k-1), dim = c((k-1), (k-1)))
	diag(h1) <- rep(1, k-1)
	h2 <- h1 * array(i, dim = c((k-1), (k-1)))
	return(h2)
}
		
f1 <- function(){
	h1 <- array(rep(0, k-1), dim = c((k-1), (k-1)))
	diag(h1) <- rep(1, k-1)
	return(h1)
}
		
f2 <- function(j) cbind(l1[,,j], l2[[j]])
		
# 4 tests based on modified approach
# unrestricted and restricted maximization of loglike
		
u <- optim(par = rep(0, 2*k), fn = loglike, gr = score, 
		method = 'BFGS')
re <- eRm::RM(y)
		
# score test statistic
		
respar <- c(-re$betapar, rep(0, k))
		
s <- score(b = respar)[c(1:(k-1),(k+1):(2*k-1))]  # vector-valued score function for free parameters
s[1:(k-1)] <- rep(0, k-1)
		
r <- rowSums(y)
ft <- table(factor(r, levels = 1:(k-1)))
		
l1 <- replicate(k-1, f1())
l2 <- lapply(X = 0:(k-2), f)
l3 <- lapply(X = 1:(k-1), f2)
l4 <- simplify2array(x = l3, higher = TRUE)
		
W <- apply(X = l4, MARGIN = 2, rbind) 
# Jacobian matrix, linear transformation 
# from 2*(k - 1)-dimensional parameter space
# to (k - 1)*(k - 1)-dim. space, k > 2
		
# orginal (k-1)*(k-1)-dim. space refers to model assuming person 
# score group specific item parameters, i.e., k-1 free item 
# parameters for each of k-1 person scores. These are linearly 
# restricted by allowing each item parameter to differ only by 
# a constant between successive person score groups   
	
# W is a matrix with (k-1)*(k-1) rows, each row referring to one of 
# the free person score group specific item parameters, and 
# 2*(k-1) columns, each column referring to one of the free 
# parameters of the linearly restricted model, the first k-1
# item parameters per score group are treated as free parameters  
		
Ir <- t(W) %*% (info(b = respar)) %*% W
# information matrix evaluated at restricted estimates
		
RS <- t(s) %*% solve(Ir) %*% s		
				
# Wald test statistic
uru <- u$par
ur <- uru[(k+1):(2*k-1)] - uru[2*k]
		
Iu <- t(W) %*% (info(b = uru)) %*% W
# information matrix evaluated at unrestricted estimates
		
Cov <- solve(Iu)[k:(2*k-2),k:(2*k-2)]
	
Wald <- t(ur) %*% solve(Cov) %*% ur
				
# Likelihood ratio test statistic
LR <- -2 * (re$loglik - -u$value)
	
# Gradient test	
GT <- s[k:(2*k-2)] %*% -ur